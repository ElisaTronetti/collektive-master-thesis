{"rule":"BEEN_PART_AGREEMENT","sentence":"^\\QThe IrGenerationExtension implemented method is generate, and it is shown in Listing \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QUnit.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q[ Simple program] [ Metaprogram] Representation of an execution of a simple program compared to a metaprogram\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThis creates the chance to align b based on the evaluation of a, because after the evaluation of a the stack is [[a, true]], which means that b align only with the neighbors that evaluated a as true; After obtaining both the result of a and b, it is calculated the value of a && b; If the full condition is evaluated as true, the stack is [a && b, true]; Then it is computed function(), which is aligned based on the stack just created.\\E$"}
{"rule":"DT_DT","sentence":"^\\QThis creates the chance to align b based on the evaluation of a, because after the evaluation of a the stack is [[a, true]], which means that b align only with the neighbors that evaluated a as true; After obtaining both the result of a and b, it is calculated the value of a && b; If the full condition is evaluated as true, the stack is [a && b, true]; Then it is computed function(), which is aligned based on the stack just created.\\E$"}
{"rule":"THE_PUNCT","sentence":"^\\QThis creates the chance to align b based on the evaluation of a, because after the evaluation of a the stack is [[a, true]], which means that b align only with the neighbors that evaluated a as true; After obtaining both the result of a and b, it is calculated the value of a && b; If the full condition is evaluated as true, the stack is [a && b, true]; Then it is computed function(), which is aligned based on the stack just created.\\E$"}
{"rule":"THE_PUNCT","sentence":"^\\QThe IR of a branch with multiple condition shown in Listing \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q The Figure \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q shows that a branch is handle like follows: The first branch of the if evaluates the condition a; If a is true, then it is evaluated the condition b.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe IR of a branch with multiple condition shown in Listing \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q The Figure \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q shows that a branch is handle like follows: The first branch of the if evaluates the condition a; If a is true, then it is evaluated the condition b.\\E$"}
{"rule":"AS_IS_VBG","sentence":"^\\QThis means that the neighboring function align only whenever the condition of the if is true, meaning that it is higher than 5; After the computation of neighboring, it is popped from the stack, leaving again only [[number > 5, true]]; Finally, the body of the if has been successfully executed and the stack can be cleared.\\E$"}
{"rule":"PHRASE_REPETITION","sentence":"^\\QAvailable for Kotlin Multiplatform Allows same target interoperability Allows different targets interoperability Acceptable efficiency Transparent to the final user Stacktrace yes yes no no yes Hash yes no no yes yes Annotation no yes (manually) yes (manually) yes no KSP yes yes yes no yes KCP yes yes yes yes yes Comparison between stacktrace, hash, annotation, KSP and Kotlin compiler plugin for solving the alignment problem\\E$"}
{"rule":"ADVERB_VERB_ADVERB_REPETITION","sentence":"^\\QAvailable for Kotlin Multiplatform Allows same target interoperability Allows different targets interoperability Acceptable efficiency Transparent to the final user Stacktrace yes yes no no yes Hash yes no no yes yes Annotation no yes (manually) yes (manually) yes no KSP yes yes yes no yes KCP yes yes yes yes yes Comparison between stacktrace, hash, annotation, KSP and Kotlin compiler plugin for solving the alignment problem\\E$"}
{"rule":"ADVERB_VERB_ADVERB_REPETITION","sentence":"^\\QAvailable for Kotlin Multiplatform Allows same target interoperability Allows different targets interoperability Acceptable efficiency Transparent to the final user Stacktrace yes yes no no yes Hash yes no no yes yes Annotation no yes (manually) yes (manually) yes no KSP yes yes yes no yes Comparison between stacktrace, hash, annotation and KSP for solving the alignment problem\\E$"}
{"rule":"ADVERB_VERB_ADVERB_REPETITION","sentence":"^\\QAvailable for Kotlin Multiplatform Allows same target interoperability Allows different targets interoperability Acceptable efficiency Transparent to the final user Stacktrace yes yes no no yes Hash yes no no yes yes Comparison between stacktrace and hash for solving the alignment problem\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QHow Kotlin Multiplatform works As can be seen in Figure \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, Kotlin Multiplatform code behaves in the following waykm_footnote: Common Kotlin: the code written in common Kotlin can be used across multiple platforms without requiring modifications.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QDSLs can be used to provide a higher level of abstraction over complex systems or processes, allowing developers to express ideas and concepts in a more concise and intuitive way.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QThis parameter is used to provide the messages received from the neighbors, and it is initialized ad an empty map as default value; state: similarly to the messages parameter, this is used to propagate the previous state of the device in the current round.\\E$"}
{"rule":"DT_DT","sentence":"^\\QA context receiver allows the block of code to access the properties and functions of the receiver object using the this keyword, without having to explicitly specify the receiver object in the code.\\E$"}
{"rule":"THE_HOW","sentence":"^\\QFurthermore, it tests the alignment of the when Kotlin expressions; aggregate: finally, in this folder are contained all the tests of the aggregate programming constructs, which are neighboring, repeating and sharing.\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QThe purpose of runUntil is to repeatedly execute the compute lambda expression until the condition lambda returns true.\\E$"}
